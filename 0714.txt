키워드 규칙
1. 프로젝트 : 맘대로
2. 패키지   : 모두 소문자로 작성 (실무는 회사 도메인을 거꾸로 작성 : com.samsung.xxx)
3. 클래스   : Upper Camel Case (첫 글자가 대문자인 Camel Case)
4. 메소드   : Lower Camel Case (첫 글자가 소문자인 Camel Case)
5. 변수     : Lower Camel Case (첫 글자가 소문자인 Camel Case)
6. 상수     : Snake Case (대문자를 밑줄로 연결)

자동 변환(promotion)
1. 작은 크기 -> 큰 크기
2. 정수 -> 실수 (반대방향는 불가)

강제 변환(casting)
1. 큰 크기 -> 작은 크기
2. 실수 -> 정수

구문 분석(parsing)
1. 문자열 -> 정수(int, long)
2. 문자열 -> 실수(double)

논리 연산
1. 논리 AND : &&, 모든 조건이 만족하면 true, 아니면 false
2. 논리 OR  : ||, 하나의 조건이라도 만족하면 true, 아니면 false
3. 논리 NOT : ! , 조건 결과가 true이면 false, 조건 결과가 false이면 true

Short Circuit Evaluation
1. 논리 AND : 결과가 false인 조건이 나타나면 더이상 조건을 인식하지 않는다. 최종 결과는 false로 정해졌기 때문이다.
2. 논리 OR  : 결과가 true인 조건이 나타나면 더이상 조건을 인식하지 않는다. 최종 결과는 true로 정해졌기 때문이다.

조건 연산자 (3개의 항을 사용하므로 삼항 연산이라고도 한다.)
조건식 ? true인 경우 결과 : false인 경우 결과 ;

정수 -> 문자열
실수 -> 문자열
= 빈 문자열("")을 더해주면 된다.



if문
1. 조건을 만족하는 경우에만 실행할 수 있다.
2. 형식
   if(조건식){
     실행문
   }

else if문
1. if문 이후에 조건식이 필요한 경우 사용할 수 있다.
2. 원하는만큼 반복해서 사용할 수 있다.
3. 형식
    if(조건식){
      실행문
    }
    else if(조건식){
      실행문
    }
    else if(조건식){
      실행문
    }

else문
1. if문의 마지막에 추가할 수 있다.
2. 조건식을 작성하지 않는다.
3. 형식
    if(조건식) {
      실행문
    } else if(조건식) {
      실행문
    } else {
      실행문
    }

switch문
1. 지정된 표현식의 결과에 따라 분기 처리한다. (true/false에 의한 분기 처리가 아니다.)
2. 일반적으로 if문에 비해서 가독성이 좋다.
3. 각 분기를 구분하는 case와 default로 구성된다.
4. break를 통해서 switch문을 종료시킬 수 있다.
5. 형식
    switch(표현식){  // 표현식의 결과는 String, char, int가 가능하다.(boolean, double, long은 불가)
    case 결과1 :
      실행문
      break
    case 결과2 :
      실행문
      break
    default :   // else
      실행문
    }

for문
1. 연속된 숫자(수열)를 생성하는 목적의 반복문
2. 형식
    for(초깃값; 조건문; 증가문){
      실행문
    }
3. 실행순서
   초깃값 -> 조건문 -> 실행문 -> 증가문 -> 조건문 -> 실행문 -> 증가문 ... 

while문
1. 특정 조건을 만족하면 실행되는 반복문이다.
2. 형식
    while(조건문){
      실행문
    }

do while문
1. 반드시 1번은 실행되는 while문
2. 형식
    do {
      실행문
    } while(조건문);

break문
1. switch문을 종료한다.
2. 반복문(for, while, do while)을 종료한다.

무한 루프(끝없는 반복) 만드는 2가지 방법
1. while(true) {  }  --추천
2. for(;;){  }

continue문
1. 반복문의 실행 시작 지점부터 다시 실행한다.
2. continue문 이후의 코드를 실행에서 제외하고자 할 때 사용한다.





